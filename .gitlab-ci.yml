# build containers for all our services

image: docker:19.03.1
services:
  - docker:19.03.1-dind

stages:
  - test
  - build
  # - release
  - deploy

variables:
  DOCKER_TLS_CERTDIR: "/certs"
  REGISTRY: us.gcr.io
  PROJECT: united-angels-web
  REPO_NAME: $REGISTRY/$PROJECT

  API_REGISTRY_IMAGE: "aspen_api"
  API_IMAGE: $REGISTRY/$PROJECT/$API_REGISTRY_IMAGE:$CI_COMMIT_SHA

  WEB_REGISTRY_IMAGE: "aspen_web"
  WEB_IMAGE: $REGISTRY/$PROJECT/$WEB_REGISTRY_IMAGE:$CI_COMMIT_SHA

before_script:
  - mkdir -p $HOME/.docker
  - echo $DOCKER_AUTH_CONFIG > $HOME/.docker/config.json

api_unit_test:
  stage: test
  image: mcr.microsoft.com/dotnet/core/sdk:3.1-buster
  script:
    - dotnet test src/aspen/aspen.tests/

api_integration_test:
  stage: test
  services:
    - postgres:12.0
  variables:
    POSTGRES_DB: Admin
    POSTGRES_USER: aspen
    POSTGRES_PASSWORD: super_secret_aspen_password
    INTEGRATION_TEST_CONNECTION: "Server=postgres; Port=5432; Database=$POSTGRES_DB; User Id=$POSTGRES_USER; Password=$POSTGRES_PASSWORD;"
  image: mcr.microsoft.com/dotnet/core/sdk:3.1-buster
  script:
    - dotnet test src/aspen/aspen.integration/

build_api:
  stage: build
  script:
    - docker build -t $API_IMAGE -f src/aspen/aspen.api/Dockerfile src/aspen/
    - docker push $API_IMAGE

build_web:
  stage: build
  script:
    - docker build -t $WEB_IMAGE -f src/aspen/aspen.web/Dockerfile src/aspen/aspen.web
    - docker push $WEB_IMAGE

# release-image:
#   stage: release
#   script:
#     - docker pull $API_TEST_IMAGE
#     - docker tag $API_TEST_IMAGE $API_RELEASE_IMAGE
#     - docker push $API_RELEASE_IMAGE
#     - docker pull $WEB_TEST_IMAGE
#     - docker tag $WEB_TEST_IMAGE $API_RELEASE_IMAGE
#     - docker push $WEB_RELEASE_IMAGE
#   only:
#     - dev

# . before a job name prevents it from running (like commenting out the entire job)
# & gives a job a name that can then be referenced by other jobs using << essentially an include
.deploy: &deploy
  image: nhumrich/k8s-deploy
  allow_failure: false

deploy-dev-api:
  <<: *deploy
  stage: deploy
  environment:
    # the env name gets used by the script to select a k8s context to operate in. So this needs to match a k8s context
    # (a labeled cluster & namespace - this is set in gitlab CI/CD settings, in the KUBECTL_CONF var)
    name: dev
#  when: manual
  script:
    # these script params are referenced inside the k8s-deployment as variables. Eventually we want to break the config
    # out into separate files using "kustomize" (built into k8s). For now we're taking the quick & easy approach.
    - /scripts/k8s-deploy.py -f k8s/api.yml --api_image $API_IMAGE --ingress dev-api-aspen.k8sd.unitedangels.org
    - /scripts/k8s-deploy.py -f k8s/web.yml --web_image $WEB_IMAGE --ingress dev-aspen.k8sd.unitedangels.org --api_url https://dev-api-aspen.k8sd.unitedangels.org
    - /scripts/k8s-deploy.py -f k8s/postgres.yml
#    - /scripts/k8s-deploy.py --tag "$CI_COMMIT_SHA" --minReplicas 1 --maxReplicas 3 --ingress dev.k8sd.united-angels.org --nodeEnv staging # currently there's no difference between stage and dev. When there is we can create the test config files and update this
