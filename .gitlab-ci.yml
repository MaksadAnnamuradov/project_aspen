# build containers for all our services

image: docker:19.03.1
services:
  - docker:19.03.1-dind

stages:
  - test
  - build
  # - release
  # - deploy

variables:
  # Use TLS https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#tls-enabled
  # DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_CERTDIR: "/certs"
  REGISTRY: us.gcr.io
  PROJECT: united-angels-web
  IMAGE: united-angels-app
  REPO_NAME: $REGISTRY/$PROJECT
  CONTAINER_IMAGE: $REGISTRY/$PROJECT/$IMAGE:$CI_COMMIT_SHA

  API_REGISTRY_IMAGE: "aspen_api"
  API_IMAGE: $REGISTRY/$PROJECT/$API_REGISTRY_IMAGE:$CI_COMMIT_SHA

  WEB_REGISTRY_IMAGE: "aspen_web"
  WEB_IMAGE: $REGISTRY/$PROJECT/$WEB_REGISTRY_IMAGE:$CI_COMMIT_SHA

before_script:
  - mkdir -p $HOME/.docker
  - echo $DOCKER_AUTH_CONFIG > $HOME/.docker/config.json

test:
  stage: test
  script:
    - docker pull cr.microsoft.com/dotnet/core/sdk:3.1-buster
    - docker run --rm -v $(pwd)/src/aspen/:/app/ mcr.microsoft.com/dotnet/core/sdk:3.1-buster dotnet test /app/aspen.tests

build:
  stage: build
  script:
    - docker build --pull -t $API_IMAGE -f src/aspen/aspen.api/Dockerfile src/aspen/
    - docker push $API_IMAGE
    - docker build --pull -t $WEB_IMAGE -f src/aspen/aspen.web/Dockerfile src/aspen/
    - docker push $WEB_IMAGE

# test2:
#   #integration tests
#   stage: test
#   script:
#     - docker pull $CONTAINER_TEST_IMAGE
#     - docker run $CONTAINER_TEST_IMAGE /script/to/run/another/test

# release-image:
#   stage: release
#   script:
#     - docker pull $API_TEST_IMAGE
#     - docker tag $API_TEST_IMAGE $API_RELEASE_IMAGE
#     - docker push $API_RELEASE_IMAGE
#     - docker pull $WEB_TEST_IMAGE
#     - docker tag $WEB_TEST_IMAGE $API_RELEASE_IMAGE
#     - docker push $WEB_RELEASE_IMAGE
#   only:
#     - dev

# deploy:
#   stage: deploy
#   script:
#     - echo "deploy here"
#   only:
#     - dev
