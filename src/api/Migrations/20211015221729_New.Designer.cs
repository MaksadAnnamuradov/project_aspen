// <auto-generated />
using System;
using System.Text.Json;
using Api.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Api.Migrations
{
    [DbContext(typeof(AspenContext))]
    [Migration("20211015221729_New")]
    partial class New
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Api.DbModels.DbEvent", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<string>("PrimaryImageUrl")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Api.DbModels.DbPageData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<JsonDocument>("Data")
                        .HasColumnType("jsonb");

                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PageData");
                });

            modelBuilder.Entity("Api.DbModels.DbPerson", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<string>("AuthID")
                        .HasColumnType("text");

                    b.Property<string>("Bio")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("Api.DbModels.DbPersonRegistration", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PersonID")
                        .HasColumnType("text");

                    b.Property<string>("RegistrationID")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("PersonID");

                    b.HasIndex("RegistrationID");

                    b.ToTable("PersonRegistrations");
                });

            modelBuilder.Entity("Api.DbModels.DbRegistration", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<string>("Nickname")
                        .HasColumnType("text");

                    b.Property<string>("OwnerID")
                        .HasColumnType("text");

                    b.Property<string>("TeamID")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("TeamID");

                    b.ToTable("Registrations");
                });

            modelBuilder.Entity("Api.DbModels.DbTeam", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("EventID")
                        .HasColumnType("text");

                    b.Property<string>("MainImage")
                        .HasColumnType("text");

                    b.Property<string>("OwnerID")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("EventID");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Api.DbModels.DbPersonRegistration", b =>
                {
                    b.HasOne("Api.DbModels.DbPerson", "Person")
                        .WithMany("PersonRegistrations")
                        .HasForeignKey("PersonID");

                    b.HasOne("Api.DbModels.DbRegistration", "Registration")
                        .WithMany("PersonRegistrations")
                        .HasForeignKey("RegistrationID");

                    b.Navigation("Person");

                    b.Navigation("Registration");
                });

            modelBuilder.Entity("Api.DbModels.DbRegistration", b =>
                {
                    b.HasOne("Api.DbModels.DbTeam", "Team")
                        .WithMany("Registrations")
                        .HasForeignKey("TeamID");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Api.DbModels.DbTeam", b =>
                {
                    b.HasOne("Api.DbModels.DbEvent", "Event")
                        .WithMany("Teams")
                        .HasForeignKey("EventID");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Api.DbModels.DbEvent", b =>
                {
                    b.Navigation("Teams");
                });

            modelBuilder.Entity("Api.DbModels.DbPerson", b =>
                {
                    b.Navigation("PersonRegistrations");
                });

            modelBuilder.Entity("Api.DbModels.DbRegistration", b =>
                {
                    b.Navigation("PersonRegistrations");
                });

            modelBuilder.Entity("Api.DbModels.DbTeam", b =>
                {
                    b.Navigation("Registrations");
                });
#pragma warning restore 612, 618
        }
    }
}
