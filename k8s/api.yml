apiVersion: autoscaling.k8s.io/v1
kind: VerticalPodAutoscaler
metadata:
  name: aspen-api-vpa
spec:
  targetRef:
    apiVersion: "apps/v1"
    kind: Deployment
    name: aspen-api
  updatePolicy:
    updateMode: "Off"

---
apiVersion: apps/v1
kind: Deployment
metadata: 
  name: aspen-api
  namespace: {{ name }}
  labels: 
    app: aspen-api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: aspen-api
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: aspen-api
    spec:
      containers:
      - image: {{ api_image }}
        name: aspen-api
        ports:
        - containerPort: 443 
        env:
        - name: PGPASSFILE
          value: "/app/.postgresql/.pgpass"
        - name: DefaultConnection
          value: "SSL Mode=require"
        volumeMounts:
          - name: uaf-db-secrets
            readOnly: true
            mountPath: /app/.postgresql
      volumes:
        - name: uaf-db-secrets
          secret:
            secretName: uaf-db-secrets
            items:
              - key: .pgpass
                path: .pgpass
              - key: postgresql.crt
                path: postgresql.crt
              - key: postgresql.key
                path: postgresql.key
      restartPolicy: Always

---
apiVersion: v1
kind: Service
metadata:
  name: aspen-api-service
  namespace: {{ name }}
  labels:
    app: aspen-api-service
spec:
  selector:
    app: aspen-api
  type:  ClusterIP
  ports:
  - port: 443
    protocol: TCP
---
kind: Ingress
apiVersion: networking.k8s.io/v1beta1
metadata:
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-production
  name: aspen-api-ingress
spec:
  rules:
  - host: {{ ingress }}
    http:
      paths:
      - path: /
        backend:
          serviceName: aspen-api-service
          servicePort: 443
  tls:
  - hosts:
    - {{ ingress }}
    secretName: {{ ingress }}-cert
