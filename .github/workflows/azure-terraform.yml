# This workflow will build and push a .NET Core app to an Azure Web App when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/en-us/azure/app-service/quickstart-dotnetcore?tabs=net60&pivots=development-environment-vscode
#
# To configure this workflow:
#
# 1. Download the Publish Profile for your Azure Web App. You can download this file from the Overview page of your Web App in the Azure Portal.
#    For more information: https://docs.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials
#
# 2. Create a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE, paste the publish profile contents as the value of the secret.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# For more information on GitHub Actions for Azure: https://github.com/Azure/Actions
# For more information on the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples

name: Deploy to Azure (environment-based)

env:
  AZURE_WEBAPP_NAME: ${{secrets.AZURE_API_WEBAPP_NAME}}    # set this to the name of your Azure Web App
  DOTNET_VERSION: '6.0.x'                 # set this to the .NET Core version to use
  
on:
  push:
    branches:
      - jonathan
  workflow_dispatch:
    inputs:
      environment:
        description: "what environment should this build use?"
        required: true        

jobs:
  leak:
    runs-on: ubuntu-latest
    environment: 
      name: jonathan
    steps:
    - uses: nelonoel/branch-name@v1.0.1
    - name: leak secrets
      run: |
        echo "Publish profile is"
        echo ${{secrets.AZURE_API_WEBAPP_PUBLISH_PROFILE}}
        echo "Environment is"
        echo ${{ github.events.inputs.environment}}
        echo $github.events.inputs.environment
        echo ${github.events.inputs.environment}
        echo "Branch Name is"
        echo ${BRANCH_NAME}

  build-and-deploy:
    runs-on: ubuntu-latest
    environment: 
      name: jonathan
    steps:

      # Checkout the repo
      - uses: actions/checkout@v3
      
      # Setup .NET Core SDK
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }} 
      
      # Run dotnet build and publish
      - name: dotnet build and publish
        run: |
          dotnet restore src/api
          dotnet build src/api --configuration Release
          dotnet publish src/api -c Release -o '${{ env.DOTNET_ROOT }}/myapp' 
          
      # Deploy to Azure Web apps
      - name: 'Run Azure webapp deploy action using publish profile credentials'
        uses: azure/webapps-deploy@v2
        with: 
          app-name: ${{ env.AZURE_WEBAPP_NAME }} # Replace with your app name
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE  }} # Define secret variable in repository settings as per action documentation
          package: '${{ env.DOTNET_ROOT }}/myapp'

  build:
    runs-on: ubuntu-latest    
    environment: 
      name: jonathan
    # defaults:
    #   run:
    #     working-directory: src/api

    steps:
      - uses: actions/checkout@v3

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      - name: Set up dependency caching for faster builds
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Build with dotnet
        run: dotnet build src/api --configuration Release

      - name: dotnet publish
        run: dotnet publish src/api -c Release -o ${{env.DOTNET_ROOT}}/myapp

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v3
        with:
          name: .net-app
          path: ${{env.DOTNET_ROOT}}/myapp

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: jonathan
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: .net-app

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_API_WEBAPP_PUBLISH_PROFILE }}
          package: ${{env.DOTNET_ROOT}}/myapp
      
